/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rtsppushclient;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

/**
 *
 * @author 10256
 */
public class RTSPPushClientTmp {

    public static final byte[] NaluStartCode = new byte[]{0, 0, 0, 1};
    public static final int MaxNaluSize = 1024 * 1024;
    public static boolean s_stopPushFile = false;
    public static byte SPSTYPE = 7;
    public static byte PPSTYPE = 8;

    private final Logger m_logger;
    private final RTSPSession m_rtspSession;
    private final RTPStream m_rtpStream;
    private String m_rtspUrl;
    private String m_serverIp;
    private FileChannel m_fc;
    private ByteBuffer m_sps;
    private ByteBuffer m_pps;
    private boolean m_rtpOverTcp;

    /**
     * @param logger
     */
    public RTSPPushClientTmp(Logger logger) {
        s_stopPushFile = true;
        m_rtspUrl = null;
        m_serverIp = null;
        m_logger = logger;
//        if (!logFileName.equalsIgnoreCase("stdout")) {
//            FileHandler fileHandler = new FileHandler(logFileName);
//            fileHandler.setFormatter(new SimpleFormatter());
//            m_logger.setUseParentHandlers(false);
//            m_logger.addHandler(fileHandler);
//        }
        m_rtspSession = new RTSPSession(m_logger);
        m_rtpStream = new RTPStream(m_logger);
        m_sps = null;
        m_pps = null;
        m_fc = null;
        m_rtpOverTcp = true;    // use tcp default
    }
    
    /**
     * @param RTSPUrl Expected to be like
     * rtsp://120.26.86.124:8888/realtime/1234/1/realtime.sdp
     */
    public void setUrl(String RTSPUrl) {
        m_rtspUrl = RTSPUrl;
        m_serverIp = m_rtspUrl.substring(7, m_rtspUrl.indexOf(":", 7));
    }
    
    /**
     * @param rtpOverTcp Use tcp or udp to transport rtp packet.
     */
    public void setTransport(boolean rtpOverTcp) {
        m_rtpOverTcp = rtpOverTcp;
    }

    private boolean setupRealtimeStream(ByteBuffer sps, ByteBuffer pps) {
        m_sps = sps;
        m_pps = pps;
        s_stopPushFile = false;
        return setupRTSPSession();
    }

    public void pushStreamDirect(String filePath, boolean rtpOverTcp, int port) throws FileNotFoundException, IOException {
        FileInputStream fis = new FileInputStream(filePath);
        m_fc = fis.getChannel();
        getSpsAndPpsFromFile();
        s_stopPushFile = false;
        if (rtpOverTcp) {
            Socket skt = new Socket(m_serverIp, port);
            pushRTPStreamFromFileInTcp(true, skt);
            skt.close();
        } else {
            pushRTPStreamFromFileInUdp(true, port);
        }
        fis.close();
    }

    /**
     * If sps and pps are all set, setup rtsp connection and pack source data
     * into rtp packet and send to stream server, else source data will be
     * ignored.
     *
     * @param src The array from which bytes are to be read as a frame which
     * exclude start code(0 0 0 1)
     *
     * @param offset The offset within the array of the first byte to be read;
     * must be non-negative and no larger than <tt>array.length</tt>
     *
     * @param length The number of bytes to be read from the given array; must
     * be non-negative and no larger than
     * <tt>array.length - offset</tt>
     *
     * @return True if send successful, false if fail. If return false, you
     * should stop to call this function and call close() finally.
     */
    public boolean pushRealtimeStream(byte src[], int offset, int length) throws IOException {
        if (offset < 0 || length + offset > src.length) {
            throw new IllegalArgumentException("offset");
        }
        if (length < 0 || length > MaxNaluSize) {
            throw new IllegalArgumentException("length");
        }

        if (m_sps == null) {
            if ((src[offset] & 0x1f) == SPSTYPE) {
                m_sps = ByteBuffer.allocate(length);
                m_sps.put(src, offset, length);
                m_sps.flip();
            }
            return true;
        }

        // 到这里说明 sps 已被set
        if (m_pps == null) {
            if ((src[offset] & 0x1f) == PPSTYPE) {
                m_pps = ByteBuffer.allocate(length);
                m_pps.put(src, offset, length);
                m_pps.flip();
                
                if (setupRealtimeStream(m_sps, m_pps)) {
                    m_rtpStream.setupWithTcp(m_rtspSession.getSocket());
                    return true;
                }
                return false;
            }
            return true;
        }

        // 到这里说明 sps和pps都已被set
        return sendStream(src, offset, length);
    }

    /**
     * @param filePath the file is expected to be .h264, which format is 0 0 0 1
     * sps 0 0 0 1 pps 0 0 0 1 ...
     * @param rtpOverTcp Use tcp or udp to transport rtp packet.
     */
    public void pushFileStream(String filePath) throws FileNotFoundException, IOException {
        FileInputStream fis = new FileInputStream(filePath);
        m_fc = fis.getChannel();

        getSpsAndPpsFromFile();
        s_stopPushFile = false;

        if (!setupRTSPSession()) {
            m_logger.log(Level.WARNING, "setup rtsp session fail");
            return;
        }
        m_logger.log(Level.INFO, "setup rtsp session successful");
        if (m_rtpOverTcp)
            pushRTPStreamFromFileInTcp(true, m_rtspSession.getSocket());
        else
            pushRTPStreamFromFileInUdp(true, m_rtspSession.getUdpPort());
    }
    
    public static void main(String[] args) {
                
        String ServerIP = "120.26.86.124";
        String RTSPUrl = "rtsp://" + ServerIP + ":8888/realtime/1234/1/realtime.sdp";
        RTSPPushClientTmp client = new RTSPPushClientTmp(Logger.getLogger(RTSPPushClientTmp.class.getName()));
        client.setUrl(RTSPUrl);
        
        if (client.m_rtspSession.setupSession(RTSPUrl, true))
            System.out.println("rtsp ok");
        else
            System.out.println("rtsp fail");
        client.close();
    }
    

    public void close() {
        s_stopPushFile = true;
//        m_rtpStream.PrintTypeCount();
        m_rtpStream.close();
        m_rtspSession.close();
    }

    private boolean setupRTSPSession() {
        m_rtspSession.setSpsAndPps(m_sps, m_pps);
        m_sps.rewind();
        m_pps.rewind();

        if (!m_rtspSession.setupSession(m_rtspUrl, m_rtpOverTcp)) {
            return false;
        }

        if (!m_rtpOverTcp) {
            if (m_rtspSession.getUdpPort() <= 0) {
                m_logger.log(Level.WARNING, "Illegal udp port");
                return false;
            }
        }
        return true;
    }

    private void pushRTPStreamFromFileInTcp(boolean cycle, Socket skt) throws IOException {
        m_rtpStream.setupWithTcp(skt);
        pushRTPStreamFromFile(cycle);
    }

    private void pushRTPStreamFromFileInUdp(boolean cycle, int udpPort) throws IOException {
        m_rtpStream.setupWithUdp(m_serverIp, udpPort);
        pushRTPStreamFromFile(cycle);
    }
//    private void pushRTPStreamFromFile(boolean cycle, boolean rtpOverTcp, int port) throws IOException {

    private void pushRTPStreamFromFile(boolean cycle) throws IOException {
        int ppsEnd = 8 + m_sps.remaining() + m_pps.remaining();
        m_fc.position(0);
        ByteBuffer streamBuf = ByteBuffer.allocate(MaxNaluSize);
        ByteBuffer nextStreamBuf = ByteBuffer.allocate(MaxNaluSize);
        ByteBuffer tmpNaluBuf = ByteBuffer.allocate(MaxNaluSize);

        int currentNaluPos;
        int NaluSize;
//            int count = 0;

        m_fc.read(streamBuf);
        streamBuf.flip();
        /**
         * 经抓包ffmpeg发的rtp包，观察得，需要先发sps及pps streamBuf pos指针移到sps
         */
        streamBuf.position(4);
        do {
            currentNaluPos = streamBuf.position();
            if (RTSPPushClientTmp.getOffsetAfterNextStartCode(streamBuf) == -1) {
                // 下一个Nalu一部分在buf1，另一部分在buf2，将两部分拼成完整的Nalu装到tmpBuf
                nextStreamBuf.clear();
                if (m_fc.read(nextStreamBuf) < 1) {
                    System.out.println("pushStreamFromFile: read file reach to end");
                    if (!cycle) {
                        break;
                    }
                    // 读到文件尾时，将文件读写位置设到第一帧重新读
                    m_fc.position(ppsEnd);
                    m_fc.read(nextStreamBuf);
                }

                nextStreamBuf.flip();
                // 找到buf2中第二个Nalu起始位置
                if (RTSPPushClientTmp.getOffsetAfterNextStartCode(nextStreamBuf) == -1) {
                    System.out.println("Illegal source");
                    break;
                }
                tmpNaluBuf.clear();
                tmpNaluBuf.put(streamBuf);
                tmpNaluBuf.put(nextStreamBuf.array(), 0, nextStreamBuf.position() - 4);
                tmpNaluBuf.flip();
                if (!sendStream(tmpNaluBuf)) {
                    break;
                }
                // 交换 streamBuf nextStreamBuf
                ByteBuffer bufRef = streamBuf;
                streamBuf = nextStreamBuf;
                nextStreamBuf = bufRef;

            } else {
                NaluSize = streamBuf.position() - 4 - currentNaluPos;
                if (!sendStream(streamBuf.array(), currentNaluPos, NaluSize)) {
                    break;
                }
            }
            // 40ms/帧
//                count++;
//                if (count == 50) {
//                    count = 0;
//                    System.out.print(".");
//                    System.out.flush();
//                }
            try {
                Thread.sleep(40);
            } catch (InterruptedException ex) {
                Logger.getLogger(RTSPPushClientTmp.class.getName()).log(Level.SEVERE, null, ex);
            }
        } while (!s_stopPushFile);
    }

    private boolean sendStream(byte src[], int offset, int length) {
        try {
            m_rtpStream.encodeANaluAndSend(src, offset, length);
//            System.out.print(".");

            return true;
        } catch (IOException ex) {
            Logger.getLogger(RTSPPushClientTmp.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }

    }

    private boolean sendStream(ByteBuffer src) {
        return sendStream(src.array(), src.position(), src.remaining());
    }

    private void getSpsAndPpsFromFile() throws IOException {
        m_fc.position(0);
        int spsOfst = 4;
        int ppsOfst;
        ByteBuffer streamBuf = ByteBuffer.allocate(MaxNaluSize);
        m_fc.read(streamBuf);
        streamBuf.flip();
        if (spsOfst != RTSPPushClientTmp.getOffsetAfterNextStartCode(streamBuf.array(), 0, streamBuf.remaining())) {
            System.out.println("Illegal source");
            return;
        }
        ppsOfst = RTSPPushClientTmp.getOffsetAfterNextStartCode(streamBuf.array(), 4, streamBuf.remaining() - 4);
        if (ppsOfst == -1) {
            System.out.println("can't get pps");
            return;
        }
        int firstNaluOfst = RTSPPushClientTmp.getOffsetAfterNextStartCode(streamBuf.array(), ppsOfst, streamBuf.remaining() - ppsOfst);
        if (firstNaluOfst == -1) {
            System.out.println("can't get pps end");
            return;
        }

        int spsLen = ppsOfst - spsOfst - 4;
        int ppsLen = firstNaluOfst - ppsOfst - 4;
        m_sps = ByteBuffer.allocate(spsLen);
        m_sps.put(streamBuf.array(), spsOfst, spsLen);
        m_sps.flip();
        m_pps = ByteBuffer.allocate(ppsLen);
        m_pps.put(streamBuf.array(), ppsOfst, ppsLen);
        m_pps.flip();
    }

    /**
     * find next start code(0001), and return the offset after that.
     *
     * @return -1 if doesn't contain any start coode
     */
    private static int getOffsetAfterNextStartCode(byte src[], int offset, int length) {
        int i = offset;
        for (; i < length; i++) {
            if (src[i] == 0
                    && src[i + 1] == 0
                    && src[i + 2] == 0
                    && src[i + 3] == 1) {
                return i + 4;
            }
        }
        return -1;
    }

    /**
     * find next start code(0001) start from current position + offset in next
     * length of bytes, and return the offset after next start code and
     * src.position move to the position after next start code
     */
    private static int getOffsetAfterNextStartCode(ByteBuffer src, int offset, int length) {
        if (length + offset > src.remaining()) {
            throw new RuntimeException("Illegal Arguement");
        }

        int rc = getOffsetAfterNextStartCode(src.array(), offset + src.position(), length);
        if (rc == -1) {
            return -1;
        }
        src.position(rc);
        return rc;
    }

    /**
     * find next start code(0001) start from current position in remaining
     * bytes, and return the offset after next start code and src.position move
     * to the position after next start code
     */
    private static int getOffsetAfterNextStartCode(ByteBuffer src) {
        return getOffsetAfterNextStartCode(src, 0, src.remaining());
    }

}
